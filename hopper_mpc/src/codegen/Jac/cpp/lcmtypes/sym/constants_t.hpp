/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __sym_constants_t_hpp__
#define __sym_constants_t_hpp__

#include "lcmtypes/eigen_lcm/Vector3d.hpp"
#include "lcmtypes/eigen_lcm/Vector4d.hpp"
#include "lcmtypes/eigen_lcm/Vector6d.hpp"

namespace sym
{

class constants_t
{
    public:
        ::eigen_lcm::Vector4d m;

        ::eigen_lcm::Vector6d L;

        ::eigen_lcm::Vector3d l_c0;

        ::eigen_lcm::Vector3d l_c1;

        ::eigen_lcm::Vector3d l_c2;

        ::eigen_lcm::Vector3d l_c3;

        ::eigen_lcm::Vector4d I;

    public:
        constants_t() = default;

        /**
         * Member constructor
         */
        inline constants_t(
            const ::eigen_lcm::Vector4d& m_arg,
            const ::eigen_lcm::Vector6d& L_arg,
            const ::eigen_lcm::Vector3d& l_c0_arg,
            const ::eigen_lcm::Vector3d& l_c1_arg,
            const ::eigen_lcm::Vector3d& l_c2_arg,
            const ::eigen_lcm::Vector3d& l_c3_arg,
            const ::eigen_lcm::Vector4d& I_arg
        );

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        using type_name_array_t = const char[12];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "constants_t"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "sym"
         */
        inline static const char * getPackageName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
        __attribute__((noinline))
#endif
        static uint64_t _computeHash(const __lcm_hash_ptr *p)
        {
            const __lcm_hash_ptr *fp;
            for(fp = p; fp != NULL; fp = fp->parent)
                if(fp->v == constants_t::getHash)
                    return 0;
            const __lcm_hash_ptr cp = { p, constants_t::getHash };

            uint64_t hash = 0x87d7bbe02ea1f333LL +
                ::eigen_lcm::Vector4d::_computeHash(&cp) +
         ::eigen_lcm::Vector6d::_computeHash(&cp) +
         ::eigen_lcm::Vector3d::_computeHash(&cp) +
         ::eigen_lcm::Vector3d::_computeHash(&cp) +
         ::eigen_lcm::Vector3d::_computeHash(&cp) +
         ::eigen_lcm::Vector3d::_computeHash(&cp) +
         ::eigen_lcm::Vector4d::_computeHash(&cp);

            return (hash<<1) + ((hash>>63)&1);
        }

        // Comparison operators.
        inline bool operator==(const constants_t& other) const;
        inline bool operator!=(const constants_t& other) const;
};

constants_t::constants_t(
    const ::eigen_lcm::Vector4d& m_arg,
    const ::eigen_lcm::Vector6d& L_arg,
    const ::eigen_lcm::Vector3d& l_c0_arg,
    const ::eigen_lcm::Vector3d& l_c1_arg,
    const ::eigen_lcm::Vector3d& l_c2_arg,
    const ::eigen_lcm::Vector3d& l_c3_arg,
    const ::eigen_lcm::Vector4d& I_arg
) : m(m_arg),
    L(L_arg),
    l_c0(l_c0_arg),
    l_c1(l_c1_arg),
    l_c2(l_c2_arg),
    l_c3(l_c3_arg),
    I(I_arg) {}

int constants_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int constants_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int constants_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t constants_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

constexpr constants_t::type_name_array_t* constants_t::getTypeNameArrayPtr() {
    return &"constants_t";
}

constexpr const char* constants_t::getTypeName()
{
    return *constants_t::getTypeNameArrayPtr();
}

const char * constants_t::getPackageName()
{
    return "sym";
}

int constants_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = this->m._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->L._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c0._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c1._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c2._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c3._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->I._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int constants_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = this->m._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->L._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c0._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c1._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c2._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->l_c3._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->I._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int constants_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->m._getEncodedSizeNoHash();
    enc_size += this->L._getEncodedSizeNoHash();
    enc_size += this->l_c0._getEncodedSizeNoHash();
    enc_size += this->l_c1._getEncodedSizeNoHash();
    enc_size += this->l_c2._getEncodedSizeNoHash();
    enc_size += this->l_c3._getEncodedSizeNoHash();
    enc_size += this->I._getEncodedSizeNoHash();
    return enc_size;
}

bool constants_t::operator==(const constants_t& other) const {
  return (
          (m==other.m) && 
          (L==other.L) && 
          (l_c0==other.l_c0) && 
          (l_c1==other.l_c1) && 
          (l_c2==other.l_c2) && 
          (l_c3==other.l_c3) && 
          (I==other.I));
}

bool constants_t::operator!=(const constants_t& other) const {
  return !(*this==other);
}

}

#endif