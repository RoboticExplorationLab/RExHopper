# This file automatically generated by skymarshal
# DO NOT MODIFY BY HAND
# fmt: off
# mypy: disallow-untyped-defs

import copy
import typing as T  # pylint: disable=unused-import

from io import BytesIO
import struct
from lcmtypes.eigen_lcm._Vector3d import Vector3d
from lcmtypes.eigen_lcm._Vector4d import Vector4d
from lcmtypes.eigen_lcm._Vector6d import Vector6d

class constants_t(object):
    __slots__ = ["m", "L", "l_c0", "l_c1", "l_c2", "l_c3", "I"]  # type: T.List[str]

    def __init__(
        self,
        m=None,  # type: Vector4d
        L=None,  # type: Vector6d
        l_c0=None,  # type: Vector3d
        l_c1=None,  # type: Vector3d
        l_c2=None,  # type: Vector3d
        l_c3=None,  # type: Vector3d
        I=None,  # type: Vector4d
        _skip_initialize=False,  # type: bool
    ):
        # type: (...) -> None
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize:
            return
        self.m = Vector4d._default() if m is None else m  # type: Vector4d
        self.L = Vector6d._default() if L is None else L  # type: Vector6d
        self.l_c0 = Vector3d._default() if l_c0 is None else l_c0  # type: Vector3d
        self.l_c1 = Vector3d._default() if l_c1 is None else l_c1  # type: Vector3d
        self.l_c2 = Vector3d._default() if l_c2 is None else l_c2  # type: Vector3d
        self.l_c3 = Vector3d._default() if l_c3 is None else l_c3  # type: Vector3d
        self.I = Vector4d._default() if I is None else I  # type: Vector4d

    @staticmethod
    def _skytype_meta():
        # type: () -> T.Dict[str, str]
        return dict(
            type="struct",
            package="sym",
            name="constants_t",
        )

    @classmethod
    def _default(cls):
        # type: () -> constants_t
        return cls()

    def __repr__(self):
        # type: () -> str
        return "constants_t({})".format(
            ", ".join("{}={}".format(name, repr(getattr(self, name))) for name in self.__slots__))

    def __eq__(self, other):
        # type: (object) -> bool
        if not isinstance(other, constants_t):
            return NotImplemented
        return (
            (self.m==other.m) and
            (self.L==other.L) and
            (self.l_c0==other.l_c0) and
            (self.l_c1==other.l_c1) and
            (self.l_c2==other.l_c2) and
            (self.l_c3==other.l_c3) and
            (self.I==other.I)
        )
    # Disallow hashing for python struct lcmtypes.
    __hash__ = None  # type: ignore

    def encode(self):
        # type: () -> bytes
        buf = BytesIO()
        buf.write(constants_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        # type: (T.BinaryIO) -> None
        if hasattr(self.m, '_get_packed_fingerprint'):
            assert self.m._get_packed_fingerprint() == Vector4d._get_packed_fingerprint()
        else:
            assert self.m._get_hash_recursive([]) == Vector4d._get_hash_recursive([])
        self.m._encode_one(buf)
        if hasattr(self.L, '_get_packed_fingerprint'):
            assert self.L._get_packed_fingerprint() == Vector6d._get_packed_fingerprint()
        else:
            assert self.L._get_hash_recursive([]) == Vector6d._get_hash_recursive([])
        self.L._encode_one(buf)
        if hasattr(self.l_c0, '_get_packed_fingerprint'):
            assert self.l_c0._get_packed_fingerprint() == Vector3d._get_packed_fingerprint()
        else:
            assert self.l_c0._get_hash_recursive([]) == Vector3d._get_hash_recursive([])
        self.l_c0._encode_one(buf)
        if hasattr(self.l_c1, '_get_packed_fingerprint'):
            assert self.l_c1._get_packed_fingerprint() == Vector3d._get_packed_fingerprint()
        else:
            assert self.l_c1._get_hash_recursive([]) == Vector3d._get_hash_recursive([])
        self.l_c1._encode_one(buf)
        if hasattr(self.l_c2, '_get_packed_fingerprint'):
            assert self.l_c2._get_packed_fingerprint() == Vector3d._get_packed_fingerprint()
        else:
            assert self.l_c2._get_hash_recursive([]) == Vector3d._get_hash_recursive([])
        self.l_c2._encode_one(buf)
        if hasattr(self.l_c3, '_get_packed_fingerprint'):
            assert self.l_c3._get_packed_fingerprint() == Vector3d._get_packed_fingerprint()
        else:
            assert self.l_c3._get_hash_recursive([]) == Vector3d._get_hash_recursive([])
        self.l_c3._encode_one(buf)
        if hasattr(self.I, '_get_packed_fingerprint'):
            assert self.I._get_packed_fingerprint() == Vector4d._get_packed_fingerprint()
        else:
            assert self.I._get_hash_recursive([]) == Vector4d._get_hash_recursive([])
        self.I._encode_one(buf)

    @staticmethod
    def decode(data):
        # type: (T.Union[bytes, T.BinaryIO]) -> constants_t
        # NOTE(eric): This function can technically accept either a BinaryIO or
        # anything that supports the C++ Buffer Protocol,
        # which is unspecifiable in type hints.

        if hasattr(data, "read"):
            # NOTE(eric): mypy isn't able to figure out the hasattr check
            buf = T.cast(T.BinaryIO, data)
        else:
            buf = BytesIO(T.cast(bytes, data))

        if buf.read(8) != constants_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return constants_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        # type: (T.BinaryIO) -> constants_t
        self = constants_t(_skip_initialize=True)
        self.m = Vector4d._decode_one(buf)
        self.L = Vector6d._decode_one(buf)
        self.l_c0 = Vector3d._decode_one(buf)
        self.l_c1 = Vector3d._decode_one(buf)
        self.l_c2 = Vector3d._decode_one(buf)
        self.l_c3 = Vector3d._decode_one(buf)
        self.I = Vector4d._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        # type: (T.List[T.Type]) -> int
        if constants_t in parents: return 0
        newparents = parents + [constants_t]
        tmphash = (0x87d7bbe02ea1f333+ Vector4d._get_hash_recursive(newparents)+ Vector6d._get_hash_recursive(newparents)+ Vector3d._get_hash_recursive(newparents)+ Vector3d._get_hash_recursive(newparents)+ Vector3d._get_hash_recursive(newparents)+ Vector3d._get_hash_recursive(newparents)+ Vector4d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash

    _packed_fingerprint = None  # type: T.Optional[bytes]

    @staticmethod
    def _get_packed_fingerprint():
        # type: () -> bytes
        if constants_t._packed_fingerprint is None:
            constants_t._packed_fingerprint = struct.pack(">Q", constants_t._get_hash_recursive([]))
        return constants_t._packed_fingerprint

    def deepcopy(self, **kwargs):
        # type: (**T.Any) -> constants_t
        """
        Deep copy of this LCM type

        Returns a copy w/ members specified by kwargs replaced with new values specified by kwargs.
        """
        result = copy.deepcopy(self)
        for key in kwargs:
            if not hasattr(result, key):
                raise KeyError("Type constants_t does not have attribute: " + str(key))
            setattr(result, key, kwargs[key])
        return result
